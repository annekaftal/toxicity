generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model comments {
  id         BigInt    @id @default(autoincrement())
  post_id    BigInt
  user_id    BigInt
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  content    String
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model followers {
  id                                  BigInt   @id @default(autoincrement())
  followed_id                         BigInt
  following_id                        BigInt
  created_at                          DateTime @default(now()) @db.Timestamp(6)
  users_followers_followed_idTousers  users    @relation("followers_followed_idTousers", fields: [followed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_following_idTousers users    @relation("followers_following_idTousers", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model likes {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  post_id    BigInt
  created_at DateTime @default(now()) @db.Timestamp(6)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post_tags {
  id      BigInt @id @default(autoincrement())
  tag_id  BigInt
  post_id BigInt
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model posts {
  id         BigInt      @id @default(autoincrement())
  user_id    BigInt
  content    String
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  comments   comments[]
  likes      likes[]
  post_tags  post_tags[]
  users      users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id        BigInt      @id @default(autoincrement())
  label     String      @unique @db.VarChar
  post_tags post_tags[]
}

model users {
  id                                      BigInt      @id @default(autoincrement())
  username                                String      @unique @db.VarChar
  email                                   String      @unique @db.VarChar
  password                                String      @db.VarChar
  created_at                              DateTime    @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime?   @default(now()) @db.Timestamp(6)
  avatar                                  String?
  comments                                comments[]
  followers_followers_followed_idTousers  followers[] @relation("followers_followed_idTousers")
  followers_followers_following_idTousers followers[] @relation("followers_following_idTousers")
  likes                                   likes[]
  posts                                   posts[]
}
